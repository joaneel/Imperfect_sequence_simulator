#! /usr/bin/python
"""
ms2fasta

This script takes the output from an MS simulation run and produces a set of
fasta sequences to represent the segregating sites in the sampled chromosomes.

Joane Elleouet (joane.elleouet@alumni.ubc.ca)
modified from Sam Vohr (svohr@soe.ucsc.edu):
https://github.com/svohr/ms_utils
"""


import argparse
import sys

from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

import ms


def base_to_seq(hap, base_pos, base_len, segs):
    """ Produces a string of length 'base_len' with A indicating a fixed base
        C indicating an ancestral base at a polymorphic position and G
        indicating a derived base. """
    cur_site = 0
    cur_base = 1
    seq_parts = list()

    if (segs=='0'):
        seq_parts.append('A' * (base_len))
    else:
        while cur_site < len(base_pos):
            # fill in the empty space
            if (int(round(base_pos[cur_site]))==0):
                base_pos[cur_site]=base_pos[cur_site]+1
            if (cur_site > 0):
                if (int(round(base_pos[cur_site]))==int(round(base_pos[cur_site-1]))):
                    base_pos[cur_site]=base_pos[cur_site]+1
                    if (int(round(base_pos[cur_site]))>=base_len):
                        cur_site=len(base_pos)
            if (int(round(base_pos[cur_site]))<=base_len):
                seq_parts.append('A' * (int(round(base_pos[cur_site])) - cur_base))
                if (hap[cur_site] == '0'):
                    seq_parts.append('C')
                else:
                    seq_parts.append('G')
            cur_base = int(round(base_pos[cur_site])) + 1
            cur_site += 1
        if cur_base <= base_len:
            seq_parts.append('A' * (base_len - cur_base +1))
    return ''.join(seq_parts)

def process_ms_results(out, ms_file, seqlength):
    """ Build fasta sequences for each  """
    ms_sample = ms_file.next()
    sim_num = 1
    while ms_sample is not None:
        hap_num = 1
        for hap in ms_sample.samples:
            seq = base_to_seq(hap, ms_sample.positions, seqlength, ms_sample.segsites)
            seq_rec = SeqRecord(Seq(seq) , '%d_%d' % (hap_num, sim_num),
                                '', '')
            SeqIO.write(seq_rec, out, 'fasta')
            hap_num += 1
        ms_sample = ms_file.next()
        sim_num += 1


def main(argv=None):
    """
    Generates fasta sequences representing sampled chromosomes from an ms
    simulation run.
    """
    if argv is None:
        argv = sys.argv

    usage = 'ms2psmc [OPTIONS] [ms_output_file]'
    parser = argparse.ArgumentParser(usage)
    parser.add_argument('ms_file', metavar='MS_FILE', nargs='?' )
    args = parser.parse_args()

    # Read from standard in by default.
    ms_in = sys.stdin

    if args.ms_file is not None:
        ms_in = open(args.ms_file,'r')

    ms_file = ms.MSReader( ms_in )
    splithead=ms_file.command.split()
    seqlength=int(splithead[7])
    process_ms_results(sys.stdout, ms_file, seqlength)

    ms_in.close()
    return 0


if __name__ == "__main__":
    sys.exit(main())

